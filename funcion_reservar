class vuelo:
    def __init__(self):
        self.cod_vuelo = 0
        self.cod_aerolinea = " "
        self.origen_vuelo = " "
        self.destino_vuelo = " "
        self.fecha_salida = " "
        self.hora_salida = " "
        self.precio_vuelo = 0.0
        self.asientos_vuelo = [[" "]*7 for i in range(int(ASIENTOS_POR_AVION/6))]
        self.estado_vuelo = " "

class reserva:
    def __init__(self):
        self.cod_reserva = 0
        self.cod_usuario = 0
        self.cod_vuelo = 0
        self.fecha_reserva = 0
        self.estado_reserva = " "
        self.nro_asiento = " "
        
def crear_vuelo():
    
    registro = vuelo()
    cod_aero = ' '
    
    while cod_aero != '*':
        os.system('cls')
        cod_aero = input("ingrese el codigo de la aerolinea, * para salir: ")
        pos = busqueda_secuencial_aerolinea_cod_activa(cod_aero)
        
        while pos == -1 and cod_aero != '*':
            os.system('cls')
            cod_aero = input("el codigo de aerolinea no existe, ingrese uno valido o * para salir:")
            pos = busqueda_secuencial_aerolinea_cod_activa(cod_aero)
            
        if cod_aero != '*':
            
            arlo_vuelos.seek(0, 2)
            registro.cod_aerolinea = cod_aero.ljust(5, " ")
            cod_vu = calcular_cant_registros(arfi_vuelos, arlo_vuelos)
            registro.cod_vuelo = cod_vu
            origen = input("ingrese el origen del vuelo: ")
            while len(origen) > 50:
                origen =input("por favor no mas de 50 caracteres, ingrese el origen nuevamente: ")  
            origen = origen.upper()             
            registro.origen_vuelo = origen.ljust(50, " ")
            destino = input("ingrese el destino del vuelo: ")
            while len(destino) > 50:
                destino = input("por favor no mas de 50 caracteres, ingrese el destino nuevamente: ")
            destino = destino.upper() 
            registro.destino_vuelo = destino.ljust(50, " ")
            fecha = pedir_fecha_valida() 
            registro.fecha_salida = fecha.ljust(10, " ") 
            hora = validar_hora()
            registro.hora_salida = hora.ljust(5, " ")
            precio = validar_precio()
            registro.precio_vuelo = round(precio, 2)
            for i in range(40):
              for k in range(3):
                  registro.asientos_vuelo[i][k] = "L"
              for k in range(4,7): 
                  registro.asientos_vuelo[i][k] = "L"
            registro.estado_vuelo = "A"
            arlo_vuelos.seek(0,2)
            pickle.dump(registro, arlo_vuelos)
            arlo_vuelos.flush()
            input("vuelo creado con exito, enter para continuar")
        else :         
            volver()

def reservar_vuelos():
    global logged_user
    reg_reserva = reserva()
    continuar = "S"
    while continuar.upper() =="S":
        print("Ingrese el codigo del vuelo que desea")
        cod_vuelo = validar_entero()
        while cod_vuelo ==-1:
            print("⚠️   Opción no válida. Debe ser un numero entero. Inténtelo nuevamente.")
            cod_vuelo = validar_entero()
        cod_vuelo = int(cod_vuelo)
        vuelo_valido = validar_vigencia(cod_vuelo)
        if vuelo_valido:
            reg_vuelo = vuelo()
            tam_reg_vuelo = calcular_tamanio_registro(arfi_vuelos,arlo_vuelos)
            arlo_vuelos.seek(tam_reg_vuelo*(cod_vuelo), 0)
            reg_vuelo = pickle.load(arlo_vuelos)
            
            print("Registro vuelo apenas leido")
            print(reg_vuelo)
            
            asientos_disponibles = False
            j = 0 
            i=0
            while i < 40 and not asientos_disponibles:  # recorre filas
                    j = 0
                    while j < 7 and not asientos_disponibles:  # recorre columnas
                        if reg_vuelo.asientos_vuelo[i][j] == "L":  # asiento libre y no pasillo
                            asientos_disponibles = True
                        else:
                            j += 1
                    if not asientos_disponibles:
                        i += 1        
            if asientos_disponibles:
                continuar_seleccion = "S"
                while continuar_seleccion.upper( )== "S":
                    print("Ingrese un numero de fila (1-40)")
                    fila = validar_entero()
                    while fila == -1 or fila>40 or fila<1:
                        print("⚠️   Opción no válida. Debe ser un numero entero entre 1 y 40. Inténtelo nuevamente.")
                        fila = validar_entero()
                    fila_real = fila-1
                    print("Ingrese un numero de columna (1-6)")
                    columna = validar_entero()
                    while columna == -1 or columna<1 or columna>6:
                        print("⚠️   Opción no válida. Debe ser un numero entero entre 1 y 6. Inténtelo nuevamente.")
                        columna = validar_entero()
                    if columna <= 3:
                        col_real = columna - 1
                    else:
                        col_real = columna
                    fila = str(fila)
                    columna = str(columna)
                    asiento = (fila + "-" + columna)
                    asiento = asiento.ljust(4," ")
                    if reg_vuelo.asientos_vuelo[fila_real][col_real] == "L":
                        reg_vuelo.asientos_vuelo[fila_real][col_real] ="R"
                        arlo_vuelos.seek(tam_reg_vuelo*(cod_vuelo), 0)
                        
                        reg_vuelo.cod_aerolinea = reg_vuelo.cod_aerolinea.ljust(5, " ")
                        reg_vuelo.origen_vuelo = reg_vuelo.origen_vuelo.ljust(50, " ")
                        reg_vuelo.origen_vuelo = reg_vuelo.origen_vuelo.ljust(50, " ")
                        reg_vuelo.fecha_salida = reg_vuelo.fecha_salida.ljust(10, " ")
                        reg_vuelo.hora_salida = reg_vuelo.hora_salida.ljust(5, " ")
                        reg_vuelo.estado_vuelo = reg_vuelo.estado_vuelo
                        
                        
                        
                        print("No hace dump. Tamanio reg vuelo", tam_reg_vuelo,"Codigo vuelo", cod_vuelo)
                        print(reg_vuelo)
                        pickle.dump(reg_vuelo, arlo_vuelos)
                        arlo_vuelos.flush()
                        
                        continuar_seleccion = "N"
                        print("Se reservo correctamente el asiento\n")
                        reg_reserva.cod_reserva = int(calcular_cant_registros(arfi_reservas, arlo_reservas))
                        reg_reserva.cod_usuario = logged_user.cod_usuario
                        reg_reserva.cod_vuelo = reg_vuelo.cod_vuelo
                        reg_reserva.estado_reserva = "confirmada".ljust(20, " ")
                        reg_reserva.nro_asiento = asiento
                        hoy = datetime.today()
                        reg_reserva.fecha_reserva = hoy.strftime("%d/%m/%Y")
                        arlo_reservas.seek(0,2)
                        pickle.dump(reg_reserva,arlo_reservas)
                        arlo_reservas.flush()
                        continuar = " "
                        while continuar.upper() !="S" and continuar.upper() !="N":
                            continuar = input(f"Desea reservar otro vuelo? S/N")
                    else:
                        continuar_seleccion = " "
                        while continuar_seleccion.upper() !="S" and continuar_seleccion.upper() !="N":
                            continuar_seleccion = input(f"No se encuentra disponible. Desea intentar con otro asiento? S/N (hint: {i-j})")
            else:
                print("No hay asientos disponibles")
                continuar = " "
                while continuar.upper() !="S" and continuar.upper() !="N":
                    continuar = input("Desea intentar con otro vuelo? S/N\n")
            
        elif not vuelo_valido:
            print("No existe un vuelo vigente con ese codigo")
            continuar = " "
            while continuar.upper() !="S" and continuar.upper() !="N":
                continuar = input("Desea intentar con otro vuelo? S/N\n")
    volver()