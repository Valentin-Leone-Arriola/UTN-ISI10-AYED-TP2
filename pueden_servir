def  buscar_vuelos():
    pass
"""     opc = -1
    while opc != 4:
        print("╔════════════════════════════════════╗")
        print("║   🛩️  MENÚ DE BÚSQUEDA DE VUELOS 🛩️   ║")
        print("╚════════════════════════════════════╝\n")
        print("1) Buscar por Aerolínea ✈️")
        print("2) Buscar por Fecha 📅")
        print("3) Buscar por Destino 🌍")
        print("4) Volver al Menú Principal 🔙") 
        opc = validar_entero()
        os.system('cls' if os.name == 'nt' else 'clear')

        while opc < 1 or opc > 4:
            print("⚠️   Opción no válida. Inténtelo nuevamente.\n")
            opc = validar_entero()
            os.system('cls' if os.name == 'nt' else 'clear')

        match opc:
            case 1:
                en_construccion()
            case 2:
                en_construccion()
            case 3:
                en_construccion()
            case 4:
                volver()
    print("entra a vuelos")
    entra = input()
 """
def  buscar_asientos():
    pass
"""     opc = -1
    while opc != 3:
        print("╔════════════════════════════════════╗")
        print("║   💺  MENÚ DE BÚSQUEDA DE ASIENTOS 💺  ║")
        print("╚════════════════════════════════════╝\n")
        print("1) Buscar por Vuelo ✈️")
        print("2) Buscar por Clase de Asiento 🛋️")
        print("3) Volver al Menú Principal 🔙") 
        opc = validar_entero()
        os.system('cls' if os.name == 'nt' else 'clear')

        while opc < 1 or opc > 3:
            print("⚠️   Opción no válida. Inténtelo nuevamente.\n")
            opc = validar_entero()
            os.system('cls' if os.name == 'nt' else 'clear')

        match opc:
            case 1:
                en_construccion()
            case 2:
                en_construccion()
            case 3:
                volver()
    os.system('cls' if os.name == 'nt' else 'clear') """


  #  print("entra a asientos")
  #   entra = input()

""" def reservar_vuelo():
    opc = -1    
    while opc != 2:
        print("╔════════════════════════════════════╗")
        print("║   🛩️  MENÚ DE RESERVA DE VUELOS 🛩️   ║")
        print("╚════════════════════════════════════╝\n")
        print("1) Reservar Vuelo ✈️")
        print("2) Volver al Menú Principal 🔙")
        opc = validar_entero()
        os.system('cls' if os.name == 'nt' else 'clear')
        while opc < 1 or opc > 2:
            print("⚠️   Opción no válida. Inténtelo nuevamente.\n")
            opc = validar_entero()
            os.system('cls' if os.name == 'nt' else 'clear')
        match opc:
            case 1:
                en_construccion()
            case 2:
                volver()
        os.system('cls' if os.name == 'nt' else 'clear')

   # print("entra a reservar vuelo")
   # entra = input()

def mostrar_menu_reservas():
    print("╔════════════════════════════════════════╗")
    print("║  📆  MENÚ DE GESTION DE RESERVAS 📆    ║")
    print("╚════════════════════════════════════════╝\n")
    print("1) Consultar Reservas 📆") 
    print("2) Cancelar o Confirmar Reservas 📆")
    print("3) Volver al Menú Principal 🔙") 
    
def  menu_gestion_reservas():
    opc = -1
    while opc != 3:
        mostrar_menu_reservas()
        opc = validar_entero()
        os.system('cls' if os.name == 'nt' else 'clear')
        while opc < 1 or opc > 3:
            print("⚠️   Opción no válida. Inténtelo nuevamente.\n")
            mostrar_menu_reservas()
            opc = validar_entero()
            os.system('cls' if os.name == 'nt' else 'clear')
        match opc: 
            case 1:
                en_construccion()
            case 2:
                en_construccion()
            case 3:
                volver()
    os.system('cls' if os.name == 'nt' else 'clear')

def  ver_historial_compras():
    print("entra a historial")
    opc = -1
    while opc != 2:
        print("╔════════════════════════════════════╗")
        print("║   💲  MENÚ DE HISTORIAL DE COMPRAS 💲  ║")
        print("╚════════════════════════════════════╝\n")
        print("1) Ver Historial de Compras 💰")
        print("2) Volver al Menú Principal 🔙") 
        opc = validar_entero()
        os.system('cls' if os.name == 'nt' else 'clear')

        while opc < 1 or opc > 2:
            print("⚠️   Opción no válida. Inténtelo nuevamente.\n")
            opc = validar_entero()
            os.system('cls' if os.name == 'nt' else 'clear')

        match opc:
            case 1:
                en_construccion()
            case 2:
                volver() 
    os.system('cls' if os.name == 'nt' else 'clear') """

""" def ver_novedades():
    print("entra a novedades")
    opc = -1
    while opc != 2:
        print("╔════════════════════════════════════╗")
        print("║   📑  MENÚ DE NOVEDADES 📑          ║")
        print("╚════════════════════════════════════╝\n")
        print("1) Ver Novedades 📑")
        print("2) Volver al Menú Principal 🔙") 
        opc = validar_entero()
        os.system('cls' if os.name == 'nt' else 'clear')

        while opc < 1 or opc > 2:
            print("⚠️   Opción no válida. Inténtelo nuevamente.\n")
            opc = validar_entero()
            os.system('cls' if os.name == 'nt' else 'clear')

        match opc:
            case 1:
                en_construccion()
            case 2:
                volver() 
    os.system('cls' if os.name == 'nt' else 'clear') """

def modificar_vuelo():
    global vuelos, precios_vuelos
    print("ingrese el codigo del vuelo que quiere modificar: ")
    codigo = validar_entero()

    #Validar rango de índice
    while codigo == -1 or codigo < 0 or codigo > 19 :
        print(" ⚠️  Codigo de vuelo invalido. Intentelo nuevamente ")
        print("Ingrese el codigo del vuelo que quiere modificar: ")
        codigo = validar_entero()

    # Validar que exista un vuelo cargado en esa posición
    if vuelos[codigo][6] != 'A' and vuelos[codigo][6] != 'B':
        print("No existe ningun vuelo activo o dado de baja con ese codigo.")
    else:
        if vuelos[codigo][6] == 'A':
            print("✈️  VUELO EN ESTADO ACTIVO: ")
            print(f"Código aero: {vuelos[codigo][0]}\nOrigen: {vuelos[codigo][1]}\nDestino: {vuelos[codigo][2]}\nFecha salida: {vuelos[codigo][3]}\nFecha llegada: {vuelos[codigo][4]}\nHora salida: {vuelos[codigo][5]}\nPrecio:${precios_vuelos[codigo]}")
            print()
            print("Seleccione que desea modificar:")
            print("1. Origen 🛫")
            print("2. Destino 🛫")
            print("3. Fecha salida 📅")
            print("4. Fecha llegada 📅")
            print("5. Hora salida  🕒")
            print("6. Precio 💰")
            print("7. Volver 🔙")
            opcion = validar_entero()

            while opcion < 1 or opcion > 7:
                print("⚠️  Opción no válida. Inténtelo nuevamente.")
                opcion = validar_entero()

            if opcion == 1:
                nuevo_origen = input("Origen: ").upper()
                vuelos[codigo][1] = nuevo_origen
            elif opcion == 2:
                nuevo_destino = input("Destino: ").upper()
                vuelos[codigo][2] = nuevo_destino
            elif opcion == 3:
                nueva_fecha_salida = pedir_fecha_valida()
                vuelos[codigo][3] = nueva_fecha_salida
            elif opcion == 4:
                nueva_fecha_llegada = pedir_fecha_valida()
                while datetime.strptime(nueva_fecha_llegada, "%d/%m/%Y") < datetime.strptime(vuelos[codigo][3], "%d/%m/%Y"):
                    print("⚠️  La fecha de finalización no puede ser anterior a la de inicio")
                    nueva_fecha_llegada = pedir_fecha_valida()
                vuelos[codigo][4] = nueva_fecha_llegada
            elif opcion == 5:
                nueva_hora_salida = validar_hora()
                vuelos[codigo][5] = nueva_hora_salida
            elif opcion == 6:
                nuevo_precio = validar_precio()
                precios_vuelos[codigo] = nuevo_precio
            else:
                volver()
         
            input("✅ Modificación realizada (o cancelada). Presione Enter para continuar...")
            os.system('cls')
            volver()  

        else: 
            print("✈️  VUELO EN ESTADO INACTIVO")
            opc = input("¿Desea cambiar el estado de su vuelo?, S(si) N(no): ")

            while opc != 'S' and opc != 'N':
                opc = input("opcion invalida, seleccione S o N: ")

            if opc == "S":
                vuelos[codigo][6] = 'A'
                print("✈️  VUELO EN ESTADO ACTIVO: ")
                print(f"Código aero: {vuelos[codigo][0]}\nOrigen: {vuelos[codigo][1]}\nDestino: {vuelos[codigo][2]}\nFecha salida: {vuelos[codigo][3]}\nFecha llegada: {vuelos[codigo][4]}\nHora salida: {vuelos[codigo][5]}\nPrecio:${precios_vuelos[codigo]}")
                print()
                print("Seleccione qué desea modificar:")
                print("1. Origen 🛫")
                print("2. Destino 🛫")
                print("3. Fecha salida 📅")
                print("4. Fecha llegada 📅")
                print("5. Hora salida  🕒")
                print("6. Precio 💰")
                print("7. Volver 🔙")
                opcion = validar_entero()

                while opcion < 1 or opcion > 7:
                    print("⚠️  Opción no válida. Inténtelo nuevamente.")
                    opcion = validar_entero()

                if opcion == 1:
                    nuevo_origen = input("Origen: ").upper()
                    vuelos[codigo][1] = nuevo_origen
                elif opcion == 2:
                    nuevo_destino = input("Destino: ").upper()
                    vuelos[codigo][2] = nuevo_destino
                elif opcion == 3:
                    nueva_fecha_salida = pedir_fecha_valida()
                    vuelos[codigo][3] = nueva_fecha_salida
                elif opcion == 4:
                    nueva_fecha_llegada = pedir_fecha_valida()
                    while datetime.strptime(nueva_fecha_llegada, "%d/%m/%Y") < datetime.strptime(vuelos[codigo][3], "%d/%m/%Y"):
                        print("⚠️  La fecha de finalización no puede ser anterior a la de inicio")
                        nueva_fecha_llegada = pedir_fecha_valida()
                    vuelos[codigo][4] = nueva_fecha_llegada
                elif opcion == 5:
                    nueva_hora_salida = validar_hora()
                    vuelos[codigo][5] = nueva_hora_salida
                elif opcion == 6:
                    nuevo_precio = validar_precio()
                    precios_vuelos[codigo] = nuevo_precio
                else:
                    volver()
            
                input("✅ Modificación realizada (o cancelada). Presione Enter para continuar...")
                os.system('cls')
                volver()  

            else:
                input("No se puede modificar un vuelo en estado INACTIVO. Presione Enter para continuar...")
                os.system('cls')
                volver()


def esta_vigente(arreglo, vuelo):
    vigente = False
    if arreglo[vuelo][5]=="A":
        fecha_actual = datetime.today()
        fecha_vuelo = datetime.strptime(vuelos[vuelo][3], "%d/%m/%Y")
        if fecha_vuelo > fecha_actual:
            vigente = True
    return vigente









class usuario:
    def __init__(self):
        self.cod_usuario = 0
        self.email_usuario = ""
        self.clave_usuario = ""
        self.tipo_usuario = ""
        self.telefono_usuario = "" \

arfi_usuarios = "usuarios.dat"
arfi_aerolineas = "aerolineas.dat"
arfi_vuelos = "vuelos.dat"
arfi_reservas = "reservas.dat"

if os.path.exists(arfi_usuarios):
    arlo_usuarios = open(arfi_usuarios, "r+b")
    arlo_aerolineas = open(arfi_aerolineas, "r+b")
    arlo_vuelos = open(arfi_vuelos, "r+b")
    arlo_reservas = open(arfi_reservas, "r+b")
else:
    print(f"Los archivos {arfi_usuarios} {arfi_aerolineas} {arfi_vuelos} {arfi_reservas} NO existian y fueron creados")
    arlo_usuarios = open(arfi_usuarios, "w+b")
    arlo_aerolineas = open(arfi_aerolineas, "w+b")
    arlo_vuelos = open(arfi_vuelos, "w+b")
    arlo_reservas = open(arfi_reservas, "w+b")
    user = usuario()
    user.cod_usuario = 0
    user.email_usuario = "admin@ventaspasajes.com".ljust(100, " ")
    user.clave_usuario = "admin123".ljust(8," ")
    user.tipo_usuario = "administrador".ljust(20, " ")
    user.telefono_usuario = "3413112233".ljust(100, " ")
    pickle.dump(user, arlo_usuarios)
    arlo_usuarios.flush()
    

mostrar_primer_menu()
opc = validar_entero()
while opc!= 3:
    while opc <  1 or opc >3:
        print("⚠️   Opción no válida. Inténtelo nuevamente.")
        mostrar_primer_menu
        opc = validar_entero()
    os.system('cls')
    match opc:
        case 1:
            registrarse(usuarios)
            mostrar_primer_menu()
            opc = validar_entero()
        case 2:
            login(arfi_usuarios,arlo_usuarios)
            mostrar_primer_menu()
            opc = validar_entero()
        case 3:
            print()
print("Cerrando programa...") 

def calcular_tamanio_registro(tamanio_arfi,arlo):
    if tamanio_arfi != 0:
        arlo.seek(0,0)
        registro = pickle.load(arlo) 
        len_registro = arlo.tell()
        return len_registro
    else:
        return -1

def buscar_ultimo_registro(arfi, arlo):
    len_archivo  = os.path.getsize(arfi)
    len_registro  = calcular_tamanio_registro(len_archivo,arlo)
    if len_registro != -1:
        cant_registros = len_archivo // len_registro #al ser registros de tamanio fijo, no es necesario verificar que no sea cero para no dividir por 0. Si fuese 0 entonces todo el documento tendria registros vacios
        return cant_registros-1
    else:
        return -1

def busqueda_secuencial_registro(arfi, arlo, valor, campo):
    arlo.seek(0,0)
    cant_registros = buscar_ultimo_registro(arfi, arlo)
    if cant_registros != -1:
        arlo.seek(0,0)
        i = 1
        registro = pickle.load(arlo)
        valor_campo = getattr(registro, campo)
        while valor_campo!= valor and i < cant_registros:
            i = i+1
            registro = pickle.load(arlo)
            valor_campo = getattr(registro, campo)
        if valor_campo== valor:
            return i-1
    else:
        return -1
        
        

def menu_login():
    print("╔════════════════════════════════════╗")
    print("║       🏠  INICIAR SESION  🏠       ║")
    print("╚════════════════════════════════════╝\n")
        
def login(arfi_usuarios, arlo_usuarios):
    intentos = 3
    tamArc = os.path.getsize(arfi_usuarios)
    tamReg = calcular_tamanio_registro(tamArc,arlo_usuarios)
    menu_login()
    mail_usuario = input("\nIngrese su usuario (enter para volver): ")
    mail_usuario = mail_usuario.ljust(30, " ")
    while intentos != 0 and mail_usuario!="":
        contrasenia = pwinput.pwinput(prompt="Ingrese la contraseña: ")
        os.system('cls')
        posicion = busqueda_secuencial_registro(arfi_usuarios,arlo_usuarios, mail_usuario, "email_usuario")
        #posicion = busqueda_secuencial(usuarios, mail_usuario , 0)
        if posicion !=-1:
            arlo_usuarios.seek(posicion * tamReg,0)
            usuario = pickle.load(arlo_usuarios)
            if  contrasenia == usuario.clave_usuario: 
                intentos = 3 
                tipo_usuario = usuario.tipo_usuario
                if tipo_usuario == "administrador".ljust(20, " "):
                    menu_administrador()
                elif tipo_usuario == "ceo de aerolinea".ljust(20, " "):
                    menu_ceo()
                else:
                    menu_usuario()
            else:
                intentos = intentos -1
                print ("\nContraseña o usuario incorrectas, le quedan", intentos,"intentos\n" )
        else:
            intentos = intentos - 1
        if intentos == 0: 
                print("\nHubieron 3 intentos fallidos. Por medidas de seguridad se cerrara el programa\n")
        else:
                print ("\nContraseña o usuario incorrectas, le quedan", intentos,"intentos\n" )
                menu_login()
                mail_usuario = input("Ingrese su mail (Enter para volver):")
    os.system('cls')
